import serial
import asyncio
import websockets

# Serial port configuration
SERIAL_PORT = 'COM6'
BAUD_RATE = 115200

# WebSocket server configuration
WS_HOST = 'localhost'
WS_PORT = 2567

# Global variable to track WebSocket clients
clients = set()
USE_DUMMY_MODE = False  # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á

async def serial_reader():
    global USE_DUMMY_MODE
    ser = None
    reconnect_delay = 2  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    while True:
        if not USE_DUMMY_MODE:
            try:
                # ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î Serial Port
                ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=0)
                print(f"‚úÖ Connected to {SERIAL_PORT} at {BAUD_RATE} baud.")
                
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á M1000 O-1 P5 Q10000 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                await asyncio.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
                if ser.is_open:
                    ser.write(b'M1000 O-1 P5 Q10000\n')

            except serial.SerialException:
                print(f"‚ö†Ô∏è No Serial Device on {SERIAL_PORT}, switching to Dummy Mode...")
                USE_DUMMY_MODE = True
        buffer = ""
        while True:
            try:
                if USE_DUMMY_MODE:
                    await asyncio.sleep(1)
                    data = "DUMMY_DATA\n"
                else:
                    loop = asyncio.get_event_loop()
                    data = await loop.run_in_executor(None, ser.read, 128)

                if data:
                    if isinstance(data, bytes):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ decode
                        buffer += data.decode('utf-8', errors='ignore')

                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        line = line.strip()

                        if clients and line:
                            await asyncio.gather(*(client.send(line) for client in clients))
                        print(line)

            except serial.SerialException:
                print("üîå Serial Disconnected, retrying...")
                USE_DUMMY_MODE = True
                if ser and ser.is_open:
                    ser.close()  # ‡∏õ‡∏¥‡∏î Serial Port ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                    print(f"ser is close")
                break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
            except Exception as e:
                print(f"‚ö†Ô∏è Error: {e}")

        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î Serial Port ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏∏‡∏î
        while USE_DUMMY_MODE:
            try:
                print(f"üîÑ Trying to reconnect to Serial Port... (Waiting {reconnect_delay}s)")
                await asyncio.sleep(reconnect_delay)
                ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=0)
                USE_DUMMY_MODE = False
                reconnect_delay = 2  # Reset ‡∏Ñ‡πà‡∏≤ delay ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
                print(f"‚úÖ Reconnected to {SERIAL_PORT} at {BAUD_RATE} baud.")

                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á M1000 O-1 P5 Q10000 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                await asyncio.sleep(1)
                if ser.is_open:
                    print(f"ser is open")
                    ser.write(b'M1000 O-1 P5 Q10000\n')
            except serial.SerialException:
                reconnect_delay = min(reconnect_delay * 2, 30)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÅ‡∏ö‡∏ö exponential ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

async def websocket_handler(websocket, path):
    clients.add(websocket)
    print("New WebSocket client connected.")

    try:
        async for _ in websocket:
            pass
    finally:
        clients.remove(websocket)
        print("WebSocket client disconnected.")

async def main():
    await asyncio.gather(
        serial_reader(),
        websockets.serve(websocket_handler, WS_HOST, WS_PORT)
    )

asyncio.run(main())
